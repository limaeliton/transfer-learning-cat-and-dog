# -*- coding: utf-8 -*-
"""Cópia de transfer-learning-cat-and-dog.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10GgLLQjiIZHixjrx-27W41SqqlE_EVnj
"""

# Importar bibliotecas
import tensorflow as tf
import tensorflow_datasets as tfds
import numpy as np
import matplotlib.pyplot as plt

# Carregar o dataset cats_vs_dogs
(ds_train, ds_test), ds_info = tfds.load(
    'cats_vs_dogs',
    split=['train[:80%]', 'train[80%:]'],
    as_supervised=True,
    with_info=True,
)

# Pré-processar as imagens
def preprocess(image, label):
  image = tf.image.resize(image, (224, 224))
  image = image / 255.0
  return image, label

ds_train = ds_train.map(preprocess)
ds_test = ds_test.map(preprocess)

# Carregar a VGG16 pré-treinada e congelar as camadas
base_model = tf.keras.applications.VGG16(weights='imagenet', include_top=False, input_shape=(224, 224, 3))
base_model.trainable = False

# Adicionar uma nova camada de classificação
model = tf.keras.Sequential([
  base_model,
  tf.keras.layers.GlobalAveragePooling2D(),
  tf.keras.layers.Dense(1, activation='sigmoid')
])

# Compilar o modelo
model.compile(optimizer='adam',
              loss='binary_crossentropy',
              metrics=['accuracy'])

# Treinar o modelo
history = model.fit(ds_train.batch(32), epochs=10, validation_data=ds_test.batch(32))

# Avaliar o modelo
loss, accuracy = model.evaluate(ds_test.batch(32), verbose=0)
print('Test loss:', loss)
print('Test accuracy:', accuracy)

# Plotar gráficos de perda e acurácia
plt.figure(figsize=(12, 4))
plt.subplot(1, 2, 1)
plt.plot(history.history['loss'], label='Training Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.title('Training and Validation Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend()

plt.subplot(1, 2, 2)
plt.plot(history.history['accuracy'], label='Training Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.title('Training and Validation Accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend()
plt.show()